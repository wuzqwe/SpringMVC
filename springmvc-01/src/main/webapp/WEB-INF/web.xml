<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!--声明，注册springmvc的核心对象DispatcherServlet
       需要在tomcat服务器启动后，创建DispatcherServlet
       为什么要创建DispatcherServlet实例
       因为DispathcherServlet在他的创建过程中，会同时创建springmvc容器对象
       读取springmvc的配置文件，把这个配置文件中的对象都创建好，当用户发起请求时就可以直接使用对象了

       servlet的初始化会执行init()方法。dispatcherServlet的init()中{
       //创建容器，读取配置文件
       ApplicationContext applicationContext=new ClassPathXmlApplicationContext("springmvc.xml");
       //把容器对象放到ServletContext中
       getServletContext().setAttribute(key,applicationContext)
       }


        启动tomcat报错，读取这个文件/WEB-INF/springmvc-servlet.xml(/WEB-INF/myweb-servlet.xml)
   -->
    <servlet>
<!--        <servlet-name>myweb</servlet-name>-->
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <!--在tomcat启动后，创建Servlet对象
            表示tomcat启动后创建对象的顺序。它的值是整数，数值越小
            tomcat创建对象的时间越早
        -->
        <load-on-startup>1</load-on-startup>

        <!--指定义springmvc读取的配置文件的位置-->
        <init-param>
            <!--springmvc的配置文件的位置的属性-->
            <param-name>contextConfigLocation</param-name>
            <!--指定自定义文件的位置-->
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>
    </servlet>


    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <!--使用框架的时候，url-pattern可以使用两种值
            1.使用扩展名方式，语法 *.xxxx,xxxx是自定义的扩展名。常用方式*.do,*.mvc
        -->
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>


</web-app>